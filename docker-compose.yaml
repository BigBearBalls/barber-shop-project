services:
  barber-shop-project:
    build:
      context: .
      dockerfile: Dockerfile
    image: barber-shop-project:latest

  zookeeper:
    image: confluentinc/cp-zookeeper:6.2.4
    healthcheck:
      test: nc -z localhost 2181 || exit -1
      interval: 10s
      timeout: 3s
      retries: 3
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "22181:2181"
    networks:
      - barber-shop-network

  barber-shop-database:
    image: postgres:14.7-alpine
    env_file:
      - env/datasource.env
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready", "-U", "chelovek", "-d", "barber-shop-database" ]
      interval: 10s
      timeout: 3s
      retries: 3
    ports:
      - "5433:5432"
    networks:
      - barber-shop-network

  kafka:
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "29092:29092"
    healthcheck:
      test: kafka-topics --bootstrap-server localhost:9092 --list
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: OUTSIDE://:29092,INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: OUTSIDE://localhost:29092,INTERNAL://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - barber-shop-network

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - "8080:8080"
    restart: always
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
    networks:
      - barber-shop-network

  auth-service:
    image: quay.io/keycloak/keycloak:26.0.4
    restart: always
    env_file:
      - env/keycloak.env
    ports:
      - "9000:8080"
    depends_on:
      user-service:
        condition: service_healthy
    command:
      - start-dev
    networks:
      - barber-shop-network

  notification-service:
    build: ./notification-service
    ports:
      - "9002:8080"
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    depends_on:
      barber-shop-project:
        condition: service_completed_successfully
      kafka-topics-generator:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - barber-shop-network

  booking-service:
    build: ./booking-service
    ports:
      - "9003:8080"
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    env_file:
      - env/datasource.env
    restart: always
    depends_on:
      barber-shop-project:
        condition: service_completed_successfully
      kafka-topics-generator:
        condition: service_completed_successfully
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    networks:
      - barber-shop-network

  user-service:
    build: ./user-service
    ports:
      - "9001:8080"
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    env_file:
      - env/datasource.env
    depends_on:
      barber-shop-project:
        condition: service_completed_successfully
      barber-shop-database:
        condition: service_healthy
    networks:
      - barber-shop-network

  procedure-service:
    build: ./procedure-service
    ports:
      - "9004:8080"
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    env_file:
      - env/datasource.env
    depends_on:
      barber-shop-project:
        condition: service_completed_successfully
      barber-shop-database:
        condition: service_healthy
    networks:
      - barber-shop-network

  gateway-service:
    build: ./gateway-service
    ports:
      - "7080:8080"
    healthcheck:
      test: curl -f http://localhost:8080/actuator/health
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    restart: always
    depends_on:
      user-service:
        condition: service_healthy
      procedure-service:
        condition: service_healthy
      booking-service:
        condition: service_healthy
      notification-service:
        condition: service_healthy
      auth-service:
        condition: service_healthy
    env_file:
      - env/keycloak.env
    networks:
      - barber-shop-network

  kafka-topics-generator:
    image: confluentinc/cp-kafka:6.2.4
    depends_on:
      kafka:
        condition: service_healthy
    entrypoint: [ '/bin/sh', '-c' ]
    networks:
      - barber-shop-network
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:9092 --list

      # echo -e 'Creating kafka topics'
      # kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic notification-topic --replication-factor 1 --partitions 3
      # kafka-topics --bootstrap-server kafka:9092 --create --if-not-exists --topic order-topic --replication-factor 1 --partitions 3

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:9092 --list
      "

networks:
  barber-shop-network:
    driver: bridge